module Main;

import Funim;
import Funim.Machine;

import MiscAlgos.Geometry;
import MiscAlgos.Functional;
import Math;
import Time;
import Cairo;
import Cairo.ImageSurface;

window_size : (I64, I64);
window_size = (1280, 720);

// The size of the area used to display one spirograph
spirograph_size : F64;
spirograph_size = window_size.@1.to_F64 / 9.0 * 4.0 - 10.0;

// The position to display the i-th spirograph
spirograph_center : I64 -> Vec2;
spirograph_center = |i| (
    let x = window_size.@0.to_F64 / 8.0 * (2 * (i % 4) + 1).to_F64;
    let y = window_size.@1.to_F64 / 4.0 * (2 * (i / 4) + 1).to_F64;
    Vec2::make(x, y) - Vec2::make_from_tuple(window_size.map01(to_F64)).scaled(0.5)
);

gear_color : (F64, F64, F64);
gear_color = (0.0, 1.0, 1.0);

pen_color : (F64, F64, F64);
pen_color = (1.0, 0.0, 0.0);

line_color : (F64, F64, F64, F64);
line_color = (1.0, 1.0, 1.0, 0.5);

velocity : F64;
velocity = 100.0;

// Parametric curve
type ParametricCurve = box struct {
    // The length of the curve, i.e., the range of parameter t
    length : F64,
    point : F64 -> Vec2,
    tangent : F64 -> Vec2,
};

namespace ParametricCurve {
    // Normalize the parametric curve so that the speed at each point is 1.
    // The first argument is the precision
    normalize : I64 -> ParametricCurve -> ParametricCurve;
    normalize = |n, c| (
        // Divide the parameter space of the original curve into n parts, calculate the length up to each i, and store it in an array.
        // The point function and tangent function use binary search to find i and return the position or tangent vector at that point.
        let cum_len = Array::fill(n, 0.0);
        let prev_pt = (c.@point)(0.0);
        let (cum_len, _) = range(1, n).fold((cum_len, prev_pt), |i, (cum_len, prev_pt)|
            let t = c.@length * i.to_F64 / n.to_F64;
            let now_pt = (c.@point)(t);
            let dl = (now_pt - prev_pt).@length;
            let cum_len = cum_len.set(i, cum_len.@(i - 1) + dl);
            (cum_len, now_pt)
        );
        let length = cum_len.@(n - 1);
        let l_to_u = |l| (
            let l = l.fmod(length);
            let l = if l < 0.0 { l + length } else { l };
            let i = cum_len.search_partition_point(|m| m < l);
            let t = c.@length * i.to_F64 / n.to_F64;
            t
        );
        let point = |t| (c.@point)(l_to_u(t));
        let tangent = |t| (
            let v = (c.@tangent)(l_to_u(t));
            v.scaled(1.0 / v.@length)
        );
        ParametricCurve {
            length : length,
            point : point,
            tangent : tangent,
        }
    );

    concatenate : ParametricCurve -> ParametricCurve -> ParametricCurve;
    concatenate = |c1, c2| (
        let length = c1.@length + c2.@length;
        let normalize_t = |t| let t = t.fmod(length); if t < 0.0 { t + length } else { t };
        let point = |t| let t = normalize_t(t); if t < c1.@length { (c1.@point)(t) } else { (c2.@point)(t - c1.@length) };
        let tangent = |t| let t = normalize_t(t); if t < c1.@length { (c1.@tangent)(t) } else { (c2.@tangent)(t - c1.@length) };
        ParametricCurve {
            length : length,
            point : point,
            tangent : tangent,
        }
    );

    invert : ParametricCurve -> ParametricCurve;
    invert = |c| (
        let length = c.@length;
        let point = |t| (c.@point)(-t);
        let tangent = |t| -(c.@tangent)(-t);
        ParametricCurve {
            length : length,
            point : point,
            tangent : tangent,
        }
    );
}

type Gear = box struct {
    // Parametric curve representing the circumference. Must be a closed curve. The speed at any t must be 1.
    curve : ParametricCurve,
    // For fixed gears, the coordinates of the origin. For rotating gears, the coordinates of the point tracing the path.
    point : Vec2, 
};

namespace Gear {
    render : Cairo -> Gear -> IO ();
    render = |cairo, gear| (
        let dt = 5.0;
        let n = (gear.@curve.@length / dt).to_I64 + 2; // Number of divisions
        cairo.set_source_rgb(gear_color);;
        range(0, n).fold_m((), |i, _|
            let t = i.to_F64 * dt;
            let p = (gear.@curve.@point)(t);
            if i == 0 {
                cairo.move_to(p.to_tuple)
            } else {
                cairo.line_to(p.to_tuple)
            }
        );;
        cairo.stroke
    );

    // Create an elliptical gear
    //
    // The radius is the length of the major axis, minor axis, and point
    ellipse_gear : F64 -> F64 -> Vec2 -> Gear;
    ellipse_gear = |a, b, p| (
        let curve = ParametricCurve {
            length : 2.0 * pi64,
            point : |t| Vec2::make(a * cos(t), b * sin(t)),
            tangent : |t| Vec2::make(-a * sin(t), b * cos(t)),
        }.normalize(1e4);
        Gear {
            curve : curve,
            point : p,
        }
    );

    // Create an elliptical gear (reverse order)
    //
    // The radius is the length of the major axis, minor axis, and point
    ellipse_gear_rev : F64 -> F64 -> Vec2 -> Gear;
    ellipse_gear_rev = |a, b, p| (
        let curve = ParametricCurve {
            length : 2.0 * pi64,
            point : |t| Vec2::make(a * cos(-t), b * sin(-t)),
            tangent : |t| Vec2::make(a * sin(-t), -b * cos(-t)),
        }.normalize(1e4);
        Gear {
            curve : curve,
            point : p,
        }
    );

    // Create a circular gear
    // 
    // Arguments are the radius and point
    // Setting the radius to a negative value reverses the direction
    circle_gear : F64 -> Vec2 -> Gear;
    circle_gear = |r, p| (
        let curve = ParametricCurve {
            length : 2.0 * pi64 * r.abs,
            point : |t| Vec2::make(cos(t/r), sin(t/r)).scaled(r),
            tangent : |t| Vec2::make(-sin(t/r), cos(t/r)),
        };
        Gear {
            curve : curve,
            point : p,
        }
    );
}

type SpiroGraph = box struct {
    // Fixed gear
    fixed_gear : Gear,
    // Rotating gear
    rotating_gear : Gear,
};

namespace SpiroGraph {
    // Calculate the transformation matrix from the rotating gear coordinates to the fixed gear coordinates
    get_transform : F64 -> SpiroGraph -> Matrix;
    get_transform = |t, spirograph| (
        let fixed_gear = spirograph.@fixed_gear;
        let rotating_gear = spirograph.@rotating_gear;
        
        // Contact point and tangent vector of the fixed gear
        let p = (fixed_gear.@curve.@point)(t);
        let v = (fixed_gear.@curve.@tangent)(t);

        // Contact point and tangent vector of the rotating gear
        let q = (rotating_gear.@curve.@point)(t);
        let w = (rotating_gear.@curve.@tangent)(t);

        // Find the affine transformation that maps (q, w) to (p, v).
        // First, rotate w to align with v. Then, transform q with this transformation to q2, and align q2 with p using a translation.
        let angle = angle(w, v);
        let m0 = Matrix::init_rotate(angle);
        let q2 = Vec2::make_from_tuple $ m0.transform_point(q.to_tuple);
        let d = p - q2;
        let m = m0.translate(d.to_tuple);

        m
    );

    two_circles_outer : F64 -> F64 -> Vec2 -> SpiroGraph;
    two_circles_outer = |r1, r2, p| (
        let fixed_gear = circle_gear(r1, Vec2::make(0.0, 0.0));
        let rotating_gear = circle_gear(-r2, p);
        SpiroGraph {
            fixed_gear : fixed_gear,
            rotating_gear : rotating_gear,
        }
    );

    two_circles_inner : F64 -> F64 -> Vec2 -> SpiroGraph;
    two_circles_inner = |r1, r2, p| (
        let fixed_gear = circle_gear(r1, Vec2::make(0.0, 0.0));
        let rotating_gear = circle_gear(r2, p);
        SpiroGraph {
            fixed_gear : fixed_gear,
            rotating_gear : rotating_gear,
        }
    );

    circle_ellipse_outer : F64 -> F64 -> F64 -> Vec2 -> SpiroGraph;
    circle_ellipse_outer = |r1, a, b, p| (
        let fixed_gear = circle_gear(r1, Vec2::make(0.0, 0.0));
        let rotating_gear = ellipse_gear_rev(a, b, p);
        SpiroGraph {
            fixed_gear : fixed_gear,
            rotating_gear : rotating_gear,
        }
    );

    circle_ellipse_inner : F64 -> F64 -> F64 -> Vec2 -> SpiroGraph;
    circle_ellipse_inner = |r1, a, b, p| (
        let fixed_gear = circle_gear(r1, Vec2::make(0.0, 0.0));
        let rotating_gear = ellipse_gear(a, b, p);
        SpiroGraph {
            fixed_gear : fixed_gear,
            rotating_gear : rotating_gear,
        }
    );

    ellipse_circle_outer : F64 -> F64 -> F64 -> Vec2 -> SpiroGraph;
    ellipse_circle_outer = |a, b, r2, p| (
        let fixed_gear = ellipse_gear(a, b, Vec2::make(0.0, 0.0));
        let rotating_gear = circle_gear(-r2, p);
        SpiroGraph {
            fixed_gear : fixed_gear,
            rotating_gear : rotating_gear,
        }
    );

    // Machine that outputs the transformation matrix from the rotating gear coordinates to the fixed gear coordinates for each frame
    transform_machine : SpiroGraph -> Machine TimeDelta Matrix;
    transform_machine = |sg| clock.map(|t| sg.get_transform(t * velocity));

    // Animation that draws the trajectory
    trajectory_animation : SpiroGraph -> Animation;
    trajectory_animation = |sg| (
        // Machine that outputs the position of the pen tip for each frame
        let pen_point_machine : Machine TimeDelta Vec2 = transform_machine(sg).map(|m|
            let p = sg.@rotating_gear.@point;
            Vec2::make_from_tuple $ m.transform_point(p.to_tuple)
        );
        // Machine that outputs (previous pen tip, current pen tip) when receiving the pen tip information
        let stroke_machine : Machine Vec2 (Option (Vec2, Vec2)) = Machine::from_transition(none(), |now, opt_prev|
            match opt_prev {
                none() => (some(now), none()),
                some(prev) => (some(now), some((prev, now)))
            }
        );
        // Animation that draws a line from the previous pen tip to the new pen tip for each frame
        let stroke_animation : Animation = pen_point_machine.compose(stroke_machine).map(|opt_prev_now, cairo|
            if opt_prev_now.is_none { pure() };
            let (prev, now) = opt_prev_now.as_some;
            cairo.set_source_rgba(line_color);;
            cairo.move_to(prev.to_tuple);;
            cairo.line_to(now.to_tuple);;
            cairo.stroke
        );
        // Buffer stroke_animation to create the trajectory animation
        let s = spirograph_size;
        let buffer_rect = Rectangle::make(-s, -s, 2.0*s, 2.0*s);
        stroke_animation.buffered(buffer_rect)
    );

    // Animation that draws the fixed gear and rotating gear
    gears_animation : SpiroGraph -> Animation;
    gears_animation = |sg| (
        let fg = sg.@fixed_gear;
        let rg = sg.@rotating_gear;
        transform_machine(sg).map(|m, cairo|
            // Draw the fixed gear
            fg.render(cairo);; 

            // Draw the rotating gear and pen
            cairo.save;;
            cairo.transform(m);;
            // Rotating gear
            rg.render(cairo);;
            // Pen
            cairo.set_source_rgb(pen_color);;
            cairo.arc(rg.@point.to_tuple, 2.0, 0.0, 2.0 * pi64);;
            cairo.fill;;
            cairo.restore;;

            pure()
        )
    );

    // Animation of this spirograph
    animation : SpiroGraph -> Animation;
    animation = |sg| Animation::stack([trajectory_animation(sg), gears_animation(sg)]);
}

type Scene = box struct {
    // 8 spirographs
    spirographs : Array SpiroGraph,
    // The time when the animation started
    start_time : F64,
    // Layer for drawing the trajectory
    layer : (Surface, Cairo),
};

spirographs : Array SpiroGraph;
spirographs = [
    SpiroGraph::two_circles_inner(spirograph_size / (4.0/1.0), spirograph_size / (4.55/1.0), Vec2::make(spirograph_size / (6.5/1.0), 0.0)),
    SpiroGraph::two_circles_inner(spirograph_size / 3.5, spirograph_size / 11.1, Vec2::make(spirograph_size / 12.0, 0.0)),
    SpiroGraph::two_circles_inner(spirograph_size / 7.5, spirograph_size / 4.05, Vec2::make(spirograph_size / 5.0, 0.0)),
    SpiroGraph::two_circles_inner(spirograph_size / 3.0, spirograph_size / 8.6, Vec2::make(spirograph_size / 15.0, 0.0)),

    SpiroGraph::circle_ellipse_inner(spirograph_size / (12.0/1.5), spirograph_size / (5.1/1.5), spirograph_size / (7.0/1.5), Vec2::make(spirograph_size / (9.0/1.5), 0.0)),
    SpiroGraph::circle_ellipse_inner(spirograph_size / 3.0, spirograph_size / 10.0, spirograph_size / 15.0, Vec2::make(spirograph_size / 19.0, 0.0)),
    SpiroGraph::circle_ellipse_inner(spirograph_size / 4.0, spirograph_size / 2.55, spirograph_size / 5.0, Vec2::make(spirograph_size / 5.5, 0.0)),
    SpiroGraph::circle_ellipse_inner(spirograph_size / 3.0, spirograph_size / 13.0, spirograph_size / 17.0, Vec2::make(spirograph_size / 19.0, 0.0)),
];

animation : Animation;
animation = (
    spirographs.to_iter.zip(count_up(0)).map(|(sg, i)| sg.animation.translate(spirograph_center(i))).to_array.Animation::stack
);

main : IO ();
main = (
    let config = Funim::Config::default(window_size);
    // let config = Funim::Config::encode(window_size, 60.0, "frames");
    Funim::run_animation(animation, config)
);

/* Utility functions */

to_string : Matrix -> String;
to_string = |m| (
    let ret = "";
    let ret = ret + m.@xx.to_string + " ";
    let ret = ret + m.@xy.to_string + " ";
    let ret = ret + m.@x0.to_string + "\n";
    let ret = ret + m.@yx.to_string + " ";
    let ret = ret + m.@yy.to_string + " ";
    let ret = ret + m.@y0.to_string;
    ret
);
