module Main;

import Canim;
import MiscAlgos.Geometry;
import MiscAlgos.Functional;
import Math;
import Time;
import Cairo;
import Cairo.ImageSurface;

window_size : (I64, I64);
window_size = (800, 600);

fps : F64;
fps = 60.0;

// パラメータ曲線
type ParametricCurve = box struct {
    // 曲線の長さ。この曲線を描画する際のtの分割数の決定のために使われる。
    length : F64,
    point : F64 -> Vec2,
    tangent : F64 -> Vec2,
};

type Gear = box struct {
    // 周を表すパラメータ曲線。閉曲線でなければならない。任意のtにおける速さは1でなくてはならない。
    curve : ParametricCurve,
    // 固定ギアのとき、原点の座標。回転ギアのとき、軌跡を描く点の座標。
    point : Vec2, 
};

namespace Gear {
    render : Cairo -> Gear -> IO ();
    render = |cairo, gear| (
        let dt = 5.0;
        let n = (gear.@curve.@length / dt).to_I64 + 1; // 分割数
        cairo.set_source_rgb((0.0, 1.0, 1.0));;
        range(0, n).fold_m((), |i, _|
            let t = i.to_F64 * dt;
            let p = (gear.@curve.@point)(t);
            if i == 0 {
                cairo.move_to(p.to_tuple)
            } else {
                cairo.line_to(p.to_tuple)
            }
        );;
        cairo.stroke
    );
}

type Scene = box struct {
    // 固定ギア
    fixed_gear : Gear,
    // 回転ギア
    rotating_gear : Gear,
    // 回転ギア座標から固定ギア座標への変換行列
    transform : Matrix,
    // 前回の軌跡点
    prev_pen_point : Option Vec2,
    // アニメーションが開始した時刻
    start_time : F64,
    // 軌跡を描画するためのレイヤー
    layer : (Surface, Cairo),
};

// 円ギアを作成する
// 
// 引数は半径と点
circle_gear : F64 -> Vec2 -> Gear;
circle_gear = |r, p| (
    let curve = ParametricCurve {
        length : 2.0 * pi64 * r,
        point : |t| Vec2::make(cos(t/r), sin(t/r)).scaled(r),
        tangent : |t| Vec2::make(-sin(t/r), cos(t/r)),
    };
    Gear {
        curve : curve,
        point : p,
    }
);

initialize : IO Scene;
initialize = (
    let time = (*get_now).to_F64;
    let layer_surface = *ImageSurface::create(Format::argb, window_size.map01(to_I32));
    let layer_cairo = *Cairo::create(layer_surface);
    pure $ Scene {
        prev_pen_point : none(),
        fixed_gear : circle_gear(100.0, Vec2::make(0.0, 0.0)),
        rotating_gear : circle_gear(71.0, Vec2::make(70.0, 0.0)),
        transform : Matrix::identity,
        start_time : time,
        layer : (layer_surface, layer_cairo)
    }
);

velocity : F64;
velocity = 100.0;

to_string : Matrix -> String;
to_string = |m| (
    let ret = "";
    let ret = ret + m.@xx.to_string + " ";
    let ret = ret + m.@xy.to_string + " ";
    let ret = ret + m.@x0.to_string + "\n";
    let ret = ret + m.@yx.to_string + " ";
    let ret = ret + m.@yy.to_string + " ";
    let ret = ret + m.@y0.to_string;
    ret
);

render : TimeDelta -> Cairo -> Scene -> IO Scene;
render = |dt, cairo, scene| (
    // 曲線のパラメータを求める。
    let t = (*get_now).to_F64 - scene.@start_time;
    let t = t * velocity;

    // 接点と接ベクトル
    let p = (scene.@fixed_gear.@curve.@point)(t);
    let v = (scene.@fixed_gear.@curve.@tangent)(t);

    // 回転ギアの座標での接点と接ベクトル
    let q = (scene.@rotating_gear.@curve.@point)(t);
    let w = -(scene.@rotating_gear.@curve.@tangent)(t);

    // (q, w)を(p, v)に移すアフィン変換を求める。これが回転ギア座標を固定ギア座標に移す変換行列になる。
    // まずは回転でwをvに一致させる。次に、その変換でqを変換したものをq2とし、平行移動でq2をpに一致させる。
    let angle = angle(w, v);
    let m0 = Matrix::init_rotate(angle);
    let q2 = Vec2::make_from_tuple $ m0.transform_point(q.to_tuple);
    let d = p - q2;
    let m = m0.translate(d.to_tuple);

    let scene = scene.set_transform(m);

    // ペンの座標を求める（固定ギア座標）
    let pen_pt = scene.@rotating_gear.@point;
    let pen_pt = Vec2::make_from_tuple $ m.transform_point(pen_pt.to_tuple);
    // let scene = scene.mod_points(Array::push_back(trace_pt));

    // 固定ギア座標から画面座標への変換行列を計算する
    // 固定ギアの中心をウィンドウの中心に移す
    let window_center = Vec2::make_from_tuple(window_size.map01(to_F64)).scaled(0.5);
    let gear_to_window = Matrix::identity.translate(window_center.to_tuple);

    // ペンを動かして、レイヤーに軌跡を描く
    match scene.@prev_pen_point {
        none() => pure(),
        some(prev_pen_point) => (
            let (surface, cairo) = scene.@layer;
            cairo.set_matrix(gear_to_window);;
            cairo.set_source_rgb((1.0, 1.0, 1.0));;
            cairo.move_to(prev_pen_point.to_tuple);;
            cairo.line_to(pen_pt.to_tuple);;
            cairo.stroke
        )
    };;
    let scene = scene.set_prev_pen_point(some(pen_pt));

    // レイヤーを描画する
    cairo.set_matrix(Matrix::identity);;
    cairo.set_source_surface(scene.@layer.@0, (0.0, 0.0));;
    cairo.rectangle((0.0, 0.0), window_size.map01(to_F64));;
    cairo.fill;;

    cairo.set_matrix(gear_to_window);;

    // 固定ギアを描く
    scene.@fixed_gear.render(cairo);;

    // 回転ギアを描く
    let m = scene.@transform; // 回転ギア座標から固定ギア座標へ

    let p = m.transform_point((0.0, 0.0));

    let m = m.translate(window_center.to_tuple); // 固定ギア座標から画面座標へ
    cairo.set_matrix(m);;
    scene.@rotating_gear.render(cairo);;

    pure $ scene
);

canim : Canim Scene;
canim = Canim {
    fps : fps,
    window_size : Vec2::make_from_tuple $ window_size.map01(to_F64),
    initialize : initialize,
    render : render,
};

main : IO ();
main = (
    canim.run
);